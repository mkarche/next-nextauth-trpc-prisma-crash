// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique //Also for NextAuth Session
  password  String
  createdAt DateTime @default(now())

  emailVerified DateTime? //for NextAuth Session
  image         String? //for NextAuth Session

  accounts Account[] //for NextAuth Session
  sessions Session[] //for NextAuth Session

  posts Post[]

}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postCode  String   @unique @default(cuid())
  title     String
  body      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
}

model Category {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  catCode String @unique
  name    String

  posts Post[]
}

//Session Management

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
